<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git子模块——在Git中再嵌套一个Git</title>
    <link href="/2020/05/13/git%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    <url>/2020/05/13/git%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>最近终于动手把博客好好地弄起来了！第一篇博文还是忍不住感叹一下～</p><p>第一篇文章，就从我部署博客遇到的问题说起。</p><h2 id="问题描述">问题描述</h2><div class="note note-primary"><p>友情提示：本文可能需要有一定的Git基础才能比较好理解。如果没接触过Git的同学推荐先学习Git的基础内容、熟练Git的基本使用。网上上手教程很多，如果想更进一步熟悉Git、了解Git的设计原理，更推荐<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git官方文档-Git Book</a></p></div><p>在搭建博客的过程中，我们往往为了美观会使用<ins>第三方主题</ins>。然后我遇到了这样一个问题：我想在我的Hexo博客中，<ins>尽可能方便地保持我的主题是最新的</ins>。</p><p>（我真的非常享受体会各种软件的各种新功能hahaha）</p><p>于是我就想在我已经构建Git的博客代码中，<code>git clone</code> 拿到主题的最新代码，并且可以更新。但是我的博客代码本身就已经有git版本管理，这就涉及到了Git子模块内容。</p><div class="note note-warning"><p>如果只是想拿一次主题代码（或者说子项目代码），而并不打算以后同步更新远程仓库的话，是无需使用Git子模块的。这种情景简单的办法有：拉到主题（子项目代码）后删除子项目目录中的.git文件夹（及.gitignore等git相关文件）即可。请结合好自己的需求。</p></div><div class="note note-info"><p>为了方便说明，我后面用<code>父项目</code>代表<code>博客</code>，<code>子项目</code>代表博客里的<code>主题</code></p></div><h3 id="直接克隆会遇到的问题">直接克隆会遇到的问题</h3><p>首先，如果我们在一个Git项目中直接再<code>git clone</code>一个项目看看会有什么效果：</p><pre><code class="hljs bash"><span class="hljs-comment"># 先创建一个父项目，初始化Git</span>$ <span class="hljs-built_in">cd</span> parent$ git init已初始化空的 Git 仓库于 /path/to/parent<span class="hljs-comment"># 放一个测试用的文件id，存入1</span>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'1'</span> &gt; id<span class="hljs-comment"># 远程拉一个子项目代码</span>$ git <span class="hljs-built_in">clone</span> https://github.com/your/SubProject sub$ git status位于分支 master尚无提交未跟踪的文件:  （使用 <span class="hljs-string">"git add &lt;文件&gt;..."</span> 以包含要提交的内容）        id        sub/提交为空，但是存在尚未跟踪的文件（使用 <span class="hljs-string">"git add"</span> 建立跟踪）<span class="hljs-comment"># 修改子项目内容</span>$ <span class="hljs-built_in">cd</span> son$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'sub'</span> &gt; name<span class="hljs-comment"># 我们添加文件到git就会报提示，大致内容就是：“你在本库（父项目）中添加了其他库（子项目），</span><span class="hljs-comment"># 如果你在其他地方clone父项目，将不会包含子项目的内容。你可能要用到git submodule。”</span>$ git all --all<span class="hljs-comment"># 提示：You've added another git repository inside your current repository.</span><span class="hljs-comment"># 提示：Clones of the outer repository will not contain the contents of</span><span class="hljs-comment"># 提示：the embedded repository and will not know how to obtain it.</span><span class="hljs-comment"># 提示：If you meant to add a submodule, use:</span><span class="hljs-comment"># 提示：</span><span class="hljs-comment"># 提示：  git submodule add &lt;url&gt; son</span><span class="hljs-comment"># 提示：</span><span class="hljs-comment"># 提示：If you added this path by mistake, you can remove it from the</span><span class="hljs-comment"># 提示：index with:</span><span class="hljs-comment"># 提示：</span><span class="hljs-comment"># 提示：  git rm --cached son</span><span class="hljs-comment"># 提示：</span><span class="hljs-comment"># 提示：See "git help submodule" for more information.</span><span class="hljs-comment"># 这时我们可以看到son/name并没有被添加到git，只有个son文件夹</span>$ git status位于分支 master尚无提交要提交的变更：  （使用 <span class="hljs-string">"git rm --cached &lt;文件&gt;..."</span> 以取消暂存）        新文件：   id        新文件：   sub</code></pre><p>经过实践，我们发现直接在父项目中<code>git clone</code>子项目是无法被父项目的Git库感知和捕捉的，换言之就是父项目的Git无法添加子项目的代码。这样的后果就是当别处要<code>git clone</code>你的项目时（或着你的项目要提交到远程仓库时），<ins>别人拿不到项目中的子项目代码</ins>。</p><p>因此我们根据上面Git给的提示，学习学习<code>Git子模块</code>。</p><h2 id="Git子模块">Git子模块</h2><div class="note note-primary"><p>主要参考自<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git官网-Git子模块章节</a></p></div><div class="note note-light"><p>子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。——Git官网</p></div><h3 id="添加Git子模块">添加Git子模块</h3><p>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。使用<code>git submodule add</code>命令。</p><pre><code class="hljs bash">$ git submodule add https://github.com/your/SubProject sub</code></pre><p>此时会生成一个<code>.gitmodules</code>文件，保存了项目 URL 与已经拉取的本地目录之间的映射：</p><pre><code class="hljs conf">[submodule &quot;sub&quot;]  path &#x3D; sub  url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;your&#x2F;SubProject</code></pre><div class="note note-warning"><p>如果有多个子模块，该文件中就会有多条记录。 <ins>要重点注意的是，该文件也像 .gitignore 文件一样受到（通过）版本控制。 它会和该项目的其他部分一同被拉取推送。</ins> 这就是克隆该项目的人知道去哪获得子模块的原因。</p></div><p>输入<code>git submodule status</code>命令即可以查看子模块的状态</p><div class="note note-warning"><p>需要注意的是<code>git submodule add</code>会自动将远程的代码拉到本地。此时你会发现你添加完子模块，子模块的代码已经拉到本地了。</p><p>但如果<code>git clone</code>父项目是不会拉到子项目的内容的。原因是父模块的Git只保存了子模块的版本信息，而并没有保存子模块的代码内容。<code>git clone</code>父模块后需要<code>git submodule init</code>和<code>git submodule update</code>才能根据子模块的版本信息拉取对应的子模块内容。这块后续会说到。</p></div><p>此时我们的子模块就添加完成了。</p><h3 id="提交父项目至远程库">提交父项目至远程库</h3><p>假设我们只是拿子项目的内容使用，暂时不更改子项目内容。此时我们像平时一样地提交父项目内容：</p><pre><code class="hljs bash">$ git add --all$ git commmit -am <span class="hljs-string">'添加子项目'</span>[master fb9093c] 添加子项目 2 files changed, 4 insertions(+) create mode 100644 .gitmodules create mode 160000 sub</code></pre><div class="note note-warning"><p>注意<code>sub</code>记录的<code>160000</code>模式。这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，<ins>而非将它记录成一个子目录或者一个文件。</ins>（这也是为什么<code>git clone</code>父项目的代码无法直接拿到子项目内容的原因！）</p></div><pre><code class="hljs bash">$ git push origin master</code></pre><h3 id="克隆含有子模块的项目">克隆含有子模块的项目</h3><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/your/MainProject$ <span class="hljs-built_in">cd</span> MainProject<span class="hljs-comment">#此时克隆父项目完毕，sub为子项目文件夹</span>$ ls -a.git .gitmodule id sub<span class="hljs-comment"># 进入子项目文件夹会发现没有子项目内容，是空的</span>$ <span class="hljs-built_in">cd</span> sub$ ls</code></pre><div class="note note-info"><p>你必须运行两个命令：<code>git submodule init</code>用来初始化本地配置文件，而<code>git submodule update</code>则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p></div><pre><code class="hljs bash">$ git submodule initSubmodule <span class="hljs-string">'sub'</span> (https://github.com/your/SubProject) registered <span class="hljs-keyword">for</span> path <span class="hljs-string">'sub'</span>$ git submodule update</code></pre><p>现在<code>sub</code>子目录是处在和之前提交时相同的状态了。</p><p>不过还有更简单一点的方式。 如果给<code>git clone</code>命令传递<code>--recurse-submodules</code>选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/your/MainProjectCloning...</code></pre><p>如果你已经克隆了项目但忘记了<code>--recurse-submodules</code>，那么可以运行<code>git submodule update --init</code> 将<code>git submodule init</code>和<code>git submodule update</code>合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块， 请使用简明的<code>git submodule update --init --recursive</code>。</p><h3 id="Git子模块的使用">Git子模块的使用</h3><p>在Git子模块目录中，你可以像往常一样使用<code>git fetch</code>,<code>git merge</code>,<code>git diff</code>（在父目录使用<code>git diff --submodule</code>）等功能。就跟普通的Git模块使用起来差不多，这里就不多介绍了。在父目录可以用<code>git submodule update --remote</code>来更新子模块，此命令默认会假定你想要更新并检出子模块仓库的<code>master</code>分支。</p><h3 id="发布子模块改动">发布子模块改动</h3><p>现在我们的子模块目录中有一些改动。 其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。</p><p>可以在子模块使用<code>git diff</code>命令查看改动。</p><p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦， 因为他们无法得到依赖的子模块改动。那些改动只存在于我们本地的拷贝中。</p><p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。<code>git push</code>命令接受可以设置为 “check” 或 “on-demand” 的<code>--recurse-submodules</code>参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使<code>push</code>操作失败。</p><pre><code class="hljs bash">$ git push --recurse-submodules=checkThe following submodule paths contain changes that cannot be found on any remote:  subPlease try  git push --recurse-submodules=on-demandor <span class="hljs-built_in">cd</span> to the path and use  git pushto push them to a remote.</code></pre><p>也就是说<code>--recurse-submodules=check</code>的时候，子项目没有提交是会不允许父项目提交的。如果把&quot;check&quot;改成&quot;on-demand&quot;，那Git会在提交父项目前先提交子项目。</p><pre><code class="hljs bash">$ git push --recurse-submodules=on-demandPushing submodule <span class="hljs-string">'sub'</span>Counting objects: 9, <span class="hljs-keyword">done</span>.Delta compression using up to 8 threads.Compressing objects: 100% (8/8), <span class="hljs-keyword">done</span>.Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, <span class="hljs-keyword">done</span>.Total 9 (delta 3), reused 0 (delta 0)To https://github.com/your/SubProject   c75e92a..82d2ad3  stable -&gt; stableCounting objects: 2, <span class="hljs-keyword">done</span>.Delta compression using up to 8 threads.Compressing objects: 100% (2/2), <span class="hljs-keyword">done</span>.Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, <span class="hljs-keyword">done</span>.Total 2 (delta 1), reused 0 (delta 0)To https://github.com/your/MainProject   3d6d338..9a377d1  master -&gt; master</code></pre><div class="note note-warning"><p>如果不推送子模块就只推送父模块，那子模块的内容别人可能会获取不到。因为父模块保存的子模块的版本只在你本地存在。</p></div><h2 id="结语">结语</h2><p>以上就是子模块的一些基础概念跟内容了。这个设计也很好地解决了我的需求，Git真的是非常强大的工具。</p><p>本文介绍子模块相关的内容有限，想要更多更详细的内容推荐<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git官网-Git子模块章节</a>。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
